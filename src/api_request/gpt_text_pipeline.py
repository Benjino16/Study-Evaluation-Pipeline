"""
This script provides utility functions to process text using OpenAI's API services.
It includes functionality to extract text from a PDF, apply a prompt, and interact with different models
(e.g., DeepSeek or GPT) via API calls.
"""

from openai import OpenAI
from src.env_manager import env
from src.prompt_manager import getPrompt
from src.services.pdf_reader import get_text_from_pdf

def process_text_with_openai(filename: str, model: str, temp: float) -> str:
    """
    Processes the text extracted from a PDF file with an OpenAI model using a specified prompt.
    
    Returns:
        str: The content generated by the model based on the input context and prompt.
    """
    # Retrieve the prompt and PDF content
    prompt = getPrompt()
    context = get_text_from_pdf(filename)
    client = None

    # Initialize the correct OpenAI client depending on the model
    if model == 'deepseek-chat':
        client = OpenAI(
            api_key=env('API_DEEPSEEK'),
            base_url="https://api.deepseek.com"
        )
    else:
        client = OpenAI(
            api_key=env('API_GPT'),
        )
        
    # Send the prompt and context to the model
    response = client.chat.completions.create(
        model=model,
        temperature=temp,
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": context}
        ],
        stream=False
    )
    return response.choices[0].message.content

def test_deepseek_pipeline() -> bool:
    """
    Tests the connection and basic functionality of the DeepSeek model API.
    
    Returns:
        bool: True if the API call succeeds and a response is received, False otherwise.
    """
    try:
        # Initialize the DeepSeek client
        client = OpenAI(
            api_key=env('API_DEEPSEEK'),
            base_url="https://api.deepseek.com"
        )
        
        # Make a test request to the DeepSeek model
        response = client.chat.completions.create(
            model='deepseek-chat',
            messages=[
                {"role": "user", "content": "This is a test call. Simply answer with the word test."}
            ],
            stream=False
        )
        return response.choices[0].message.content is not None
    except:
        return False
